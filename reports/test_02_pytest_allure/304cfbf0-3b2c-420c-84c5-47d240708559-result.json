{"name": "test_login[Gilberto-secret_sauce]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: no such execution context\n  (Session info: chrome=121.0.6167.161)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6E7222142+3514994]\n\t(No symbol) [0x00007FF6E6E40CE2]\n\t(No symbol) [0x00007FF6E6CE74C3]\n\t(No symbol) [0x00007FF6E6CD0F3B]\n\t(No symbol) [0x00007FF6E6CCEE85]\n\t(No symbol) [0x00007FF6E6CCF7CE]\n\t(No symbol) [0x00007FF6E6CDDE61]\n\t(No symbol) [0x00007FF6E6CF4471]\n\t(No symbol) [0x00007FF6E6CF937A]\n\t(No symbol) [0x00007FF6E6CCFEC6]\n\t(No symbol) [0x00007FF6E6CF40AD]\n\t(No symbol) [0x00007FF6E6D72824]\n\t(No symbol) [0x00007FF6E6D55D93]\n\t(No symbol) [0x00007FF6E6D24BDC]\n\t(No symbol) [0x00007FF6E6D25C64]\n\tGetHandleVerifier [0x00007FF6E724E16B+3695259]\n\tGetHandleVerifier [0x00007FF6E72A6737+4057191]\n\tGetHandleVerifier [0x00007FF6E729E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6E6F704F9+689705]\n\t(No symbol) [0x00007FF6E6E4C048]\n\t(No symbol) [0x00007FF6E6E48044]\n\t(No symbol) [0x00007FF6E6E481C9]\n\t(No symbol) [0x00007FF6E6E388C4]\n\tBaseThreadInitThunk [0x00007FFE9F237344+20]\n\tRtlUserThreadStart [0x00007FFEA02026B1+33]", "trace": "username = 'Gilberto', password = 'secret_sauce'\n\n    @pytest.mark.login\n    @pytest.mark.parametrize(\"username, password\", get_data())\n    def test_login(username, password):\n>       driver = SeleniumWebDriver(implicitly_wait=1, explicitly_wait=1)\n\nreports\\test_02_pytest_allure.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlibrary\\simplified.py:23: in __init__\n    self.driver.maximize_window()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:500: in maximize_window\n    self.execute(command, None)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000139B0AECF40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"no such execution context\",\"message\":\"no such execution context\\\\n  (Sess...07FF6E6E388C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE9F237344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEA02026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: no such execution context\nE         (Session info: chrome=121.0.6167.161)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E7222142+3514994]\nE       \t(No symbol) [0x00007FF6E6E40CE2]\nE       \t(No symbol) [0x00007FF6E6CE74C3]\nE       \t(No symbol) [0x00007FF6E6CD0F3B]\nE       \t(No symbol) [0x00007FF6E6CCEE85]\nE       \t(No symbol) [0x00007FF6E6CCF7CE]\nE       \t(No symbol) [0x00007FF6E6CDDE61]\nE       \t(No symbol) [0x00007FF6E6CF4471]\nE       \t(No symbol) [0x00007FF6E6CF937A]\nE       \t(No symbol) [0x00007FF6E6CCFEC6]\nE       \t(No symbol) [0x00007FF6E6CF40AD]\nE       \t(No symbol) [0x00007FF6E6D72824]\nE       \t(No symbol) [0x00007FF6E6D55D93]\nE       \t(No symbol) [0x00007FF6E6D24BDC]\nE       \t(No symbol) [0x00007FF6E6D25C64]\nE       \tGetHandleVerifier [0x00007FF6E724E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6E72A6737+4057191]\nE       \tGetHandleVerifier [0x00007FF6E729E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6E6F704F9+689705]\nE       \t(No symbol) [0x00007FF6E6E4C048]\nE       \t(No symbol) [0x00007FF6E6E48044]\nE       \t(No symbol) [0x00007FF6E6E481C9]\nE       \t(No symbol) [0x00007FF6E6E388C4]\nE       \tBaseThreadInitThunk [0x00007FFE9F237344+20]\nE       \tRtlUserThreadStart [0x00007FFEA02026B1+33]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "parameters": [{"name": "username", "value": "'Gilberto'"}, {"name": "password", "value": "'secret_sauce'"}], "start": 1707771405235, "stop": 1707771406969, "uuid": "85779f96-26ee-414f-9651-bd93e219137b", "historyId": "501810155af7d2d0761e38b9e8d564f1", "testCaseId": "e30dcb273174ee6b93f1c89a0eff4e28", "fullName": "reports.test_02_pytest_allure#test_login", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "reports"}, {"name": "suite", "value": "test_02_pytest_allure"}, {"name": "host", "value": "DESKTOP-551JSCE"}, {"name": "thread", "value": "58820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "reports.test_02_pytest_allure"}]}